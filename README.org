
This repository contains C++ code to simulate several epidemiological
models, with emphasis on those most useful to model COVID19.


* Contents

The source code produces the following executables (some details on
the models are given below):

 - sir :: Simple fully-connected SIR model.  The simplest
   implementation, mostly useful as check for other programs.

 - sir_m :: The same fully-connected SIR as in =sir= but with the
   option to do multiple runs and compute mean and variance across
   realizations of the stochastic dynamcis.

 - sir_f :: A SIR with population divided in families, and different
   in- and out-of-family transmission rates.

 - seeiir_i1, seeiir_i2, seeiir_i3 :: Three implementations of a
   SE_2I_2R model, with population divided in families.

All models mentioned are implemented in their stochastic variants.
The programs read a few arguments from the command line, and the model
parameters from a parameter file.  Running the programs without
arguments outputs a brief reminder of the required arguments.  The
required arguments are typically the name of the parameter file, the
random number seed, the maximum time to run and the number of runs (if
this number is greater than one, the output will be the average and
variance over the different runs).  Unless an output file is required
as argument, programs write to standard output.

The parameter file gives the model rate parameters ($\beta$, $\gamma$,
etc, defined below) and information about the population, such as the
number of families, and number of family members.

The format of the parameter file can be gathered from the examples.


* Models

** Simple mean field SIR

The population is composed of \(N\) indistinguishable individuals,
each interacting equally with all the others.  An individual can be in
one of three states S (susceptible), I (infected) or R (recovered).
The dynamics is defined by the transition rates

\[  W^{(i)}_{S\to I} = \beta \frac{N_I}{N-1} \]
\[  W^{(i)}_{I\to R} = \gamma \]




* Building

If you download a release tarball, it's enough to do

: ./configure
: make
: sudo make install

This installs in =/usr/local=, you can give =--prefix= to the
~configure~ script to change this.  The development versions of the
following libraries are required to build, you will get a configure
error if they are missing:

 - GNU Scientific library

** Compile from repository

To compile from a clone of the repository you need to install
=autotools=.  First generate the ~configure~ script with

: autoreconf -if

then proceed with ~configure~ and ~make~ as above.
